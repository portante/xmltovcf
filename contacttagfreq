#!./bin/python3

# Generate a table of all the XML tags used across all contacts, sorted by
# their frequency of occurrance in reverse order.
#
# We also perform a bit of validation that the root `elementCount` attribute
# actually matches the total number of contacts, and that there are ONLY
# `contact` elements being considered.
#
# This kind of introspection of the contact data let's us determine where to
# focus our efforts for conversion.
from collections import defaultdict
from lxml import etree
import operator
import sys

tree = etree.parse(sys.argv[1])

root = tree.getroot()

# First very the total number of contacts match the element count
contacts_n = int(root.attrib['elementCount'])
root_n = len(root)
if contacts_n != root_n:
    print(f"Warning:  XML `elementCount` for contacts, {contacts_n}, does not match number of contacts found, {root_n}", file=sys.stderr)

contact_tags_d = defaultdict(int)
contact_n = 0
for contact in root:
    if contact.tag != 'contact':
        print(f"Error:  expecting all `contact` tags, found {contact.tag}, after processing {contact_n} contact(s)", file=sys.stderr)
        sys.exit(1)
    for el in contact:
        contact_tags_d[el.tag] += 1
    contact_n += 1

count_w = len(str(root_n)) + 1
for tag, count in sorted(contact_tags_d.items(), key=operator.itemgetter(1), reverse=True):
    freq = (count / root_n) * 100.0
    print(f"{count:{count_w}d} {freq:5.1f}% {tag}")
