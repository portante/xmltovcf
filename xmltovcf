#!/usr/bin/env python3

# Based on https://www.datacamp.com/tutorial/python-xml-elementtree

from lxml import etree
import sys

space_s = "{http://www.w3.org/XML/1998/namespace}space"

# Create the Element Tree object for the XML file
tree = etree.parse(sys.argv[1])

# Start at the root of the tree.
root = tree.getroot()


def _bE(s):
    s = s.replace("\\", "\\\\").replace(";", "\\;").replace(",", "\\,")
    return s.replace("\r\n", "\\n").replace("\n", "\\n").replace("\r", "\\n")


class N(object):
    def __init__(self):
        self.prefix = ''
        self.given = ''
        self.family = ''
        self.additional = ''
        self.suffix = ''

    def fullName(self):
        fn_s = f"{self.given} {self.family}".strip()
        if not fn_s:
            raise ValueError("No given or family name present")
        return fn_s

    def genLines(self):
        n_s = ';'.join([_bE(self.family), _bE(self.given), _bE(self.additional), _bE(self.prefix), _bE(self.suffix)])
        yield f"N:{n_s}"


class Value(object):
    obj_n = None

    def __init__(self):
        self.value = ''

    def genLines(self):
        if not self.obj_n:
            raise Exception("ERROR: missing object name for a Value object")
        if not self.value:
            return
        yield f"{self.obj_n}:{_bE(self.value)}"


class FN(Value):
    obj_n = "FN"


class NICKNAME(Value):
    obj_n = "NICKNAME"


class ORG(object):
    def __init__(self):
        self.company = ''
        self.department = ''
        self.office = ''

    def genLines(self):
        # Map to 'ORG:<company>;<office>;<department>'
        if not (self.company or self.department or self.office):
            return
        if not self.company:
            raise ValueError("No company defined")
        if not self.department:
            self.department = self.office
        elif self.office:
            self.department = f"{self.department}, {self.office}"
            self.office = ''
        line = f"ORG:{_bE(self.company)}"
        if self.department:
            line = f"{line};{_bE(self.department)}"
        yield line


class TITLE(Value):
    obj_n = "TITLE"


class EMAILs(object):
    # Email "type" mapping
    email_type_map_d = { '0': 'work', '1': 'home', '2': 'other' }

    def __init__(self):
        self.email_d = {}

    def add(self, address, primary, etype):
        if address in self.email_d:
            if (self.email_d[address]['primary'] != primary) or (self.email_d[address]['etype'] != etype):
                raise ValueError(f"Email address, `{address}`, has inconsistent attributes: previously found '{self.email_d[address]}', encountered 'primary={primary},etype={etype}'")
        else:
            self.email_d[address] = { 'primary': primary, 'etype': etype }

    def genLines(self):
        if not self.email_d:
            return
        #  An email type of "1" _seems_ to mean "home", "0" _seams_ to
        #  mean "work", and "2" _seems_ to mean "other".
        for address in self.email_d.keys():
            types_l = [ "INTERNET" ] + [ self.email_type_map_d[self.email_d[address]['etype']] ]
            if self.email_d[address]['primary'] == '1':
                types_l.append('pref')
            types_s = ",".join(types_l)
            yield f"EMAIL;TYPE={types_s}:{address}"


class TELs(object):
    def __init__(self):
        self.tel_l = []

    def add(self, value, types_l):
        self.tel_l.append((value, types_l))

    def genLines(self):
        for (value, types_l) in self.tel_l:
            types_s = ",".join(types_l)
            yield f"TEL;TYPE={types_s}:{value}"


class ADR(object):
    def __init__(self, kind, pref=False):
        self.box = ''
        self.extended = ''
        self.street = ''
        self.city = ''
        self.region = ''
        self.code = ''
        self.country = ''
        self.kind = kind
        self.pref = 'pref' if pref else ''

    def genLines(self):
        country = '' if self.country in ('USA', 'United States', 'United States of America') else self.country
        adr_s = ";".join([_bE(self.box), _bE(self.extended), _bE(self.street), _bE(self.city), _bE(self.region), _bE(self.code), _bE(country)])
        if adr_s == ';;;;;;':
            return
        type_l = [self.kind, self.pref] if self.pref else [self.kind]
        type_s = ",".join(type_l)
        yield f"ADR;TYPE={type_s}:{adr_s}"


class NOTE(object):
    def __init__(self):
        self.value = ''
        self.categories_d = {}

    def addCategory(self, category, primary=False):
        self.categories_d[category] = primary

    def genLines(self, cardid):
        extra_s = f"\nCard ID (xmltovcf): {cardid:05d}"
        if self.categories_d:
            categories_l = [ f"'{k}'" for k,y in sorted(self.categories_d.items(), key=lambda x: x[1], reverse=True) ]
            categories_s = ", ".join(categories_l)
            extra_s += f"\nImported Categories: {categories_s}"
        value_s = (self.value + extra_s).strip()
        if value_s:
            yield f"NOTE:{_bE(value_s)}"


class URLs(object):
    def __init__(self):
        self.urls_l = []

    def add(self, url, utype):
        self.urls_l.append((url, utype))

    def genLines(self):
        for (url, utype) in self.urls_l:
            yield f"URL;TYPE={utype}:{url}"


class BDAY(Value):
    obj_n = "BDAY"


class ANNIVERSARY(object):
    '''Uses X-ABDATE with an X-ABLabel.'''
    def __init__(self):
        self.value = ''

    def genLines(self, itemn):
        if not self.value:
            return
        yield f"item{itemn}.X-ABDATE;type=pref:{self.value}"
        yield f"item{itemn}.X-ABLabel:_$!<Anniversary>!$_"
        itemn += 1


class X_ABRELATEDNAMESs(object):
    def __init__(self):
        self.values_l = []

    def add(self, value, label):
        self.values_l.append((value, label))

    def genLines(self, itemn):
        for (value, label) in self.values_l:
            if label == "Christmas Card Name":
                pref_s = ";type=pref"
                label_s = label
            elif label == "maiden":
                pref_s = ''
                label_s = label
            else:
                pref_s = ''
                label_s = f"_$!<{label.capitalize()}>!$_"
            yield f"item{itemn}.X-ABRELATEDNAMES{pref_s}:{value}"
            yield f"item{itemn}.X-ABLabel:{label_s}"
            itemn += 1


class ctx(object):
    def __init__(self):
        self.itemn = 1

    def __add__(self, other):
        self.itemn += other
        return self

    def __str__(self):
        return str(self.itemn)


class vCard(object):
    def __init__(self):
        self.N = N()
        self.FN = FN()
        self.NICKNAME = NICKNAME()
        self.ORG = ORG()
        self.TITLE = TITLE()
        self.EMAILs = EMAILs()
        self.hADR = ADR('home', True)
        self.bADR = ADR('work')
        self.oADR = ADR('other')
        self.TELs = TELs()
        self.URLs = URLs()
        self.BDAY = BDAY()
        self._fields = ['N', 'FN', 'NICKNAME', 'ORG', 'TITLE', 'EMAILs', 'hADR', 'bADR', 'oADR', 'TELs', 'URLs', 'BDAY']
        self.ANNIVERSARY = ANNIVERSARY()
        self.X_ABRELATEDNAMESs = X_ABRELATEDNAMESs()
        self.NOTE = NOTE()

    def serialize(self, cardid):
        if not self.FN.value:
            self.FN.value = self.N.fullName()

        yield "BEGIN:VCARD"
        yield "VERSION:3.0"
        yield "PRODID:-//github.com/portante/xmltovcf"
        for field in self._fields:
            obj = getattr(self, field)
            for line in obj.genLines():
                yield line
        itemctx = ctx()
        for line in self.NOTE.genLines(cardid):
            yield line
        for line in self.ANNIVERSARY.genLines(itemctx):
            yield line
        for line in self.X_ABRELATEDNAMESs.genLines(itemctx):
            yield line
        if ("Business" in self.NOTE.categories_d) or ("Businesses" in self.NOTE.categories_d):
            yield "X-ABShowAs:COMPANY"
        yield "END:VCARD"


ignored_tags = frozenset((
    'OPFContactCanDelete',
    'OPFContactCanEdit',
    'OPFContactCopyAge',
    'OPFContactCopyBusinessAlias',
    'OPFContactCopyCompletedDateTime',
    'OPFContactCopyContactImage',
    'OPFContactCopyCustom3Data',
    'OPFContactCopyCustomPhone3',
    'OPFContactCopyDueDateTime',
    'OPFContactCopyFuriganaChildrensNames',
    'OPFContactCopyInterests',
    'OPFContactCopyModDate',
    'OPFContactCopyNotes',
    'OPFContactCopyPager',
    'OPFContactCopyStartDateTime',
    'OPFContactGetFlagStatus',
    'OPFContactIsJapaneseContact',
    'OPFContactType',
    ))

# Expected contact tags
handled_tags_d = {
    'OPFContactCanDelete': 0,			# Ignore
    'OPFContactCanEdit': 0,			# Ignore
    'OPFContactCopyAge': 0,			# Ignore
    'OPFContactCopyBusinessAlias': 0,		# Ignore
    'OPFContactCopyCompletedDateTime': 0,	# Ignore
    'OPFContactCopyContactImage': 0,		# Ignore
    'OPFContactCopyCustom3Data': 0,		# Ignore
    'OPFContactCopyCustomPhone3': 0,		# Ignore
    'OPFContactCopyDueDateTime': 0,		# Ignore
    'OPFContactCopyFuriganaChildrensNames': 0,	# Ignore
    'OPFContactCopyInterests': 0,		# Ignore
    'OPFContactCopyModDate': 0,			# Ignore
    'OPFContactCopyNotes': 0,			# Ignore (maybe BeautifulSoup?)
    'OPFContactCopyPager': 0,			# Ignore
    'OPFContactCopyStartDateTime': 0,		# Ignore
    'OPFContactGetFlagStatus': 0,		# Ignore
    'OPFContactIsJapaneseContact': 0,		# Ignore
    'OPFContactType': 0,			# Ignore

    'OPFContactCopyDisplayName': 0,		# Map to 'FN'

    'OPFContactCopyTitle': 0,			# Christmas Card Name
                                                #   - typically this would be mapped to 'N'->'prefix'
                                                #
                                                #  X-ABRELATEDNAMES;type=pref:<value-text>
                                                #  X-ABLabel:Christmas Card Name

    'OPFContactCopyFirstName': 0,		# Map to 'N'->'given'
    'OPFContactCopyLastName': 0,		# Map to 'N'->'family'
    'OPFContactCopyMiddleName': 0,		# Map to 'N'->'additional'
    'OPFContactCopySetNameSuffix': 0,		# Map to 'N'->'suffix'

    'OPFContactCopyNickName': 0,		# Map to 'NICKNAME'

    'OPFContactCopyHomeStreetAddress': 0,	# Map to 'ADR;type=HOME;type=pref:<pobox>;<extended>;<street>;<city>;<region/state>;<code/zip>;<country>'
    'OPFContactCopyHomeCity': 0,
    'OPFContactCopyHomeState': 0,
    'OPFContactCopyHomeZip': 0,
    'OPFContactCopyHomeCountry': 0,

    'OPFContactCopyBusinessStreetAddress': 0,	# Map to 'ADR;type=WORK;type=pref:<pobox>;<extended>;<street>;<city>;<region/state>;<code/zip>;<country>'
    'OPFContactCopyBusinessCity': 0,
    'OPFContactCopyBusinessState': 0,
    'OPFContactCopyBusinessZip': 0,
    'OPFContactCopyBusinessCountry': 0,

    'OPFContactCopyOtherStreetAddress': 0,      # Map to 'ADR;type=OTHER:<pobox>;<extended>;<street>;<city>;<region/state>;<code/zip>;<country>'
    'OPFContactCopyOtherCity': 0,
    'OPFContactCopyOtherState': 0,
    'OPFContactCopyOtherZip': 0,

    'OPFContactCopyHomeFax': 0,			# Map to 'TEL;type=HOME;type=FAX:<value-text>'
    'OPFContactCopyHomePhone': 0,		# Map to 'TEL;type=HOME;type=VOICE;type=pref:<value-text>'
    'OPFContactCopyHomePhone2': 0,		# Map to 'TEL;type=HOME;type=VOICE:<value-text>'
    'OPFContactCopyCellPhone': 0,		# Map to 'TEL;type=CELL;type=VOICE:<value-text>'

    'OPFContactCopyBusinessFax': 0,		# Map to 'TEL;type=WORK;type=FAX:<value-text>'
    'OPFContactCopyBusinessPhone': 0,		# Map to 'TEL;type=WORK;type=VOICE;type=pref:<value-text>'
    'OPFContactCopyBusinessPhone2': 0,		# Map to 'TEL;type=WORK;type=VOICE:<value-text>'

    'OPFContactCopyCustomPhone1': 0,		# Map to 'TEL;type=OTHER;type=VOICE:<value-text>'

    'OPFContactCopyBusinessTitle': 0,		# Map to 'TITLE'

    'OPFContactCopyBusinessDepartment': 0,	# Map to 'ORG:<company>;<office>;<department>'
    'OPFContactCopyBusinessCompany': 0,
    'OPFContactCopyBusinessOffice': 0,

    'OPFContactCopyHomeWebPage': 0,		# Map to 'URL;type=HOME:...'

    'OPFContactCopyBusinessHomePage': 0,	# Map to 'URL;type=WORK:...'

    'OPFContactCopyAnniversary': 0,		# Map to 'ANNIVERSARY'
    'OPFContactCopyBirthday': 0,		# Map to 'BDAY'

    'OPFContactCopySpousesName': 0,		# Map to 'RELATED;type=SPOUSE:<value-text>'
    'OPFContactCustomData7': 0,			# Map to 'RELATED;type=MAIDENNAME:<value-text>'
    'OPFContactCopyChildren': 0,		# Map to 'RELATED;type=CHILD:<value-text>'

    'OPFContactCopyNotesPlain': 0,		# Map to 'NOTE'

    'OPFContactCopyDefaultEmailAddress': 0,	# Map to 'EMAIL;type=pref:<value-text>'
    'OPFContactCopyEmailAddressList': 0,
    'OPFContactCopyEmailAddressList1': 0,
    'OPFContactCopyEmailAddressList2': 0,

    'OPFContactCopyPrimaryCategory': 0,		# Map to 'CATEGORIES;type=pref:...'
    'OPFContactCopyCategoryList': 0,		# Map to 'CATEGORIES:...'
}

# First very the total number of contacts match the element count
contacts_n = int(root.attrib['elementCount'])
root_n = len(root)
if contacts_n != root_n:
    print(f"Warning:  XML `elementCount` for contacts, {contacts_n}, does not match number of contacts found, {root_n}", file=sys.stderr)
contact_n = 0

# Build up a list of existing, and expected, contact tags.  We are expecting
# only `contact` tags off the root, so issue an error and exit if any are
# encountered.  If any contact has tags we don't have in our "handled tags"
# table, flag it and exit.  Most of the XML elements emitted by Microsoft
# Office contain the "preserve space" attribute, which we conveniently remove
# along the way while also checking that there are no other attributes on the
# top-level contact elements.
contact_id = 0
for contact in root:
    if contact.tag != 'contact':
        print(f"Error:  expecting all `contact` tags, found {contact.tag}, after processing {contact_id} contact(s)", file=sys.stderr)
        sys.exit(1)
    contact_id += 1
    del contact.attrib[space_s]
    if len(contact.attrib) != 0:
        print(f"Error: contact #{contact_id:d} has unexpected attributes: '{contact.attrib}'", file=sys.stderr)
        sys.exit(1)
    for el in contact:
        del el.attrib[space_s]
        if len(el.attrib) != 0:
            print(f"Error: contact #{contact_id:d} has unexpected attributes on element with tag '{el.tag}': '{el.attrib}'", file=sys.stderr)
            sys.exit(1)
        if el.tag not in handled_tags_d:
            print(f"Error: contact #{contact_id:d} has an unexpected tag, '{el.tag}': '{el.text}'", file=sys.stderr)
            sys.exit(1)
        handled_tags_d[el.tag] += 1
missing = 0
for tag, count in handled_tags_d.items():
    if tag in ignored_tags:
        # Don't consider any ignored tags
        continue
    if count == 0:
        print(f"Error: did not encounter tag, '{tag}'", file=sys.stderr)
        missing += 1
if missing > 0:
    sys.exit(1)

# Now that we have verified that all the tags in the list of contacts are
# handled we can begin building the vCards.

first = True
contact_id = 0
for contact in root:
    contact_id += 1
    # Create a vCard and add the required "N" and "FN" fields.  These are going
    # to be filled in as we process the contact tags.
    vcard = vCard()
    for el in contact:
        if el.tag in ignored_tags:
            # Skip any ignored tags first
            pass
        elif el.tag == 'OPFContactCopyDisplayName' and el.text is not None:
            vcard.FN.value = el.text
        elif el.tag == 'OPFContactCopyFirstName' and el.text is not None:
            # Map to 'N'->'given'
            vcard.N.given = el.text
        elif el.tag == 'OPFContactCopyLastName' and el.text is not None:
            # Map to 'N'->'family'
            vcard.N.family = el.text
        elif el.tag == 'OPFContactCopyMiddleName' and el.text is not None:
            # Map to 'N'->'additional'
            vcard.N.additional = el.text
        elif el.tag == 'OPFContactCopySetNameSuffix' and el.text is not None:
            # Map to 'N'->'suffix'
            vcard.N.suffix = el.text
        elif el.tag == 'OPFContactCopyNickName' and el.text is not None:
            # Map to 'NICKNAME'
            vcard.NICKNAME.value = el.text
        elif el.tag == 'OPFContactCopyTitle' and el.text is not None:
            if 0:
                # Typically this would be mapped to 'N'->'prefix'
                vcard.N.prefix = el.text
            else:
                # ... but, I had hijacked that name for Christmas card label name
                #  X-ABRELATEDNAMES;type=pref:<value-text>
                vcard.X_ABRELATEDNAMESs.add(el.text, 'Christmas Card Name')
        elif el.tag == 'OPFContactCopyHomeStreetAddress' and el.text is not None:
            # Map to 'ADR;type=HOME;type=pref:;;\n5081 Glen Canyon Dr;Virginia Beach;VA;23462;'
            vcard.hADR.street = el.text
        elif el.tag == 'OPFContactCopyHomeCity' and el.text is not None:
            vcard.hADR.city = el.text
        elif el.tag == 'OPFContactCopyHomeState' and el.text is not None:
            vcard.hADR.region = el.text
        elif el.tag == 'OPFContactCopyHomeZip' and el.text is not None:
            vcard.hADR.code = el.text
        elif el.tag == 'OPFContactCopyHomeCountry' and el.text is not None:
            vcard.hADR.country = el.text
        elif el.tag == 'OPFContactCopyBusinessStreetAddress' and el.text is not None:
            # Map to 'ADR;type=WORK;type=pref:;;438 King St;Littleton;MA;01460;USA'
            vcard.bADR.street = el.text
        elif el.tag == 'OPFContactCopyBusinessCity' and el.text is not None:
            vcard.bADR.city = el.text
        elif el.tag == 'OPFContactCopyBusinessState' and el.text is not None:
            vcard.bADR.region = el.text
        elif el.tag == 'OPFContactCopyBusinessZip' and el.text is not None:
            vcard.bADR.code = el.text
        elif el.tag == 'OPFContactCopyBusinessCountry' and el.text is not None:
            vcard.bADR.country = el.text
        elif el.tag == 'OPFContactCopyOtherStreetAddress' and el.text is not None:
            # Map to 'ADR;type=OTHER:;;86 Crestwood Drive;Northborough;MA;01532-1831;'
            vcard.oADR.street = el.text
        elif el.tag == 'OPFContactCopyOtherCity' and el.text is not None:
            vcard.oADR.city = el.text
        elif el.tag == 'OPFContactCopyOtherState' and el.text is not None:
            vcard.oADR.region = el.text
        elif el.tag == 'OPFContactCopyOtherZip' and el.text is not None:
            vcard.oADR.code = el.text
        elif el.tag == 'OPFContactCopyHomeFax' and el.text is not None:
            # Map to 'TEL;type=HOME;type=FAX:603.579.0716'
            vcard.TELs.add(el.text, ['home', 'fax'])
        elif el.tag == 'OPFContactCopyHomePhone' and el.text is not None:
            # Map to 'TEL;type=HOME;type=VOICE;type=pref:603.579.0716'
            vcard.TELs.add(el.text, ['home', 'voice'])
        elif el.tag == 'OPFContactCopyHomePhone2' and el.text is not None:
            # Map to 'TEL;type=HOME;type=VOICE:603.579.0716'
            vcard.TELs.add(el.text, ['home2', 'voice'])
        elif el.tag == 'OPFContactCopyCellPhone' and el.text is not None:
            # Map to 'TEL;type=CELL;type=VOICE:603.579.0716'
            vcard.TELs.add(el.text, ['cell', 'voice'])
        elif el.tag == 'OPFContactCopyBusinessFax' and el.text is not None:
            # Map to 'TEL;type=WORK;type=FAX:603.579.0716'
            vcard.TELs.add(el.text, ['work', 'fax'])
        elif el.tag == 'OPFContactCopyBusinessPhone' and el.text is not None:
            # Map to 'TEL;type=WORK;type=VOICE;type=pref:603.579.0716'
            vcard.TELs.add(el.text, ['work', 'voice'])
        elif el.tag == 'OPFContactCopyBusinessPhone2' and el.text is not None:
            # Map to 'TEL;type=WORK;type=VOICE:603.579.0716'
            vcard.TELs.add(el.text, ['work2', 'voice'])
        elif el.tag == 'OPFContactCopyCustomPhone1' and el.text is not None:
            # Map to 'TEL;type=OTHER;type=VOICE:<value.text>'
            vcard.TELs.add(el.text, ['other', 'voice'])
        elif el.tag == 'OPFContactCopyBusinessTitle' and el.text is not None:
            # Map to 'TITLE'
            vcard.TITLE.value = el.text
        elif el.tag == 'OPFContactCopyBusinessCompany':
            # Map to 'ORG:<company>;<department>,<office>', but just get the
            # values here, assemble after read all contact tags.
            vcard.ORG.company = el.text.strip()
        elif el.tag == 'OPFContactCopyBusinessDepartment':
            # Map to 'ORG:<company>;<department>,<office>', but just get the
            # values here, assemble after read all contact tags.
            vcard.ORG.department = el.text.strip()
        elif el.tag == 'OPFContactCopyBusinessOffice':
            # Map to 'ORG:<company>;<department>,<office>', but just get the
            # values here, assemble after read all contact tags.
            vcard.ORG.office = el.text.strip()
        elif el.tag == 'OPFContactCopyHomeWebPage' and el.text is not None:
            # Map to 'URL;type=HOME:...'
            vcard.URLs.add(el.text, 'home')
        elif el.tag == 'OPFContactCopyBusinessHomePage' and el.text is not None:
            # Map to 'URL;type=WORK:...'
            vcard.URLs.add(el.text, 'work')
        elif el.tag == 'OPFContactCopyAnniversary' and el.text is not None:
            # Map to 'ANNIVERSARY'
            vcard.ANNIVERSARY.value = el.text
        elif el.tag == 'OPFContactCopyBirthday' and el.text is not None:
            # Map to 'BDAY'
            vcard.BDAY.value = el.text
        elif el.tag == 'OPFContactCopySpousesName' and el.text is not None:
            # Map to 'RELATED;type=SPOUSE:<value-text>'
            vcard.X_ABRELATEDNAMESs.add(el.text, 'spouse')
        elif el.tag == 'OPFContactCustomData7' and el.text is not None:
            # Map to 'RELATED;type=MAIDEN:<value-text>'
            vcard.X_ABRELATEDNAMESs.add(el.text, 'maiden')
        elif el.tag == 'OPFContactCopyChildren':
            # Map to 'RELATED;type=CHILD:<value-text>'
            for child in el:
                if child.tag != 'string' or child.text is None:
                    continue
                vcard.X_ABRELATEDNAMESs.add(child.text, 'child')
        elif el.tag == 'OPFContactCopyNotesPlain' and el.text is not None:
            # Map to 'NOTE'
            vcard.NOTE.value = el.text
        elif el.tag in ('OPFContactCopyDefaultEmailAddress', 'OPFContactCopyEmailAddressList', 'OPFContactCopyEmailAddressList1', 'OPFContactCopyEmailAddressList2'):
            # Microsoft Office Contacts XML for emails is just crazy.  There are
            # four lists for no apparent reason.  First create a dictionary of
            # all the unique email addresses removing any duplicates.  Below
            # we'll process them when we have finished with all the contact
            # elements.
            for child in el:
                vcard.EMAILs.add(child.attrib['OPFContactEmailAddressAddress'], child.attrib['OPFContactEmailAddressIsDefault'], child.attrib['OPFContactEmailAddressType'])
        elif el.tag == 'OPFContactCopyPrimaryCategory':
            # Map to 'CATEGORIES;type=pref:...'
            for child in el:
                if child.tag == 'OPFCategoryCopyName' and child.text is not None:
                    vcard.NOTE.addCategory(child.text, primary=True)
        elif el.tag == 'OPFContactCopyCategoryList':
            # Map to 'CATEGORIES:...'
            for child in el:
                if child.tag != 'category':
                    continue
                if 'OPFCategoryCopyName' in child.attrib:
                    vcard.NOTE.addCategory(child.attrib['OPFCategoryCopyName'])
        else:
            raise Exception(f"{el.tag}")
    if not first:
        print()
    else:
        first = False
    for line in vcard.serialize(contact_id):
        print(line)
