#!/usr/bin/env python3

"""
Convert Microsoft Office XML contacts to vCard format.

This script converts contact information from Microsoft Office XML format to
the standard vCard format. It handles various contact fields including names,
addresses, phone numbers, email addresses, and more.

The script is specifically designed for Microsoft Office contact XML format
and may not work with other XML contact formats.

Usage:
    xmltovcf contacts.xml > contacts.vcf
    xmltovcf --version=4.0 contacts.xml -o contacts.vcf
"""

from lxml import etree
import sys
import os
import argparse
import logging
import vobject
from typing import Dict, List, Optional, Set, Any

# Constants
XML_SPACE_NS = "{http://www.w3.org/XML/1998/namespace}space"
EMAIL_TYPE_MAP = {'0': 'work', '1': 'home', '2': 'other'}

class ContactError(Exception):
    """Base exception for contact processing errors."""
    pass

class Contact:
    """Represents a single contact with all its data."""
    def __init__(self, element: etree.Element):
        self.element = element
        self.data: Dict[str, Any] = {
            'name': {},
            'addresses': {},
            'phones': [],
            'emails': [],
            'urls': [],
            'organization': [],
            'categories': [],
            'related': []
        }
        self.errors: List[str] = []

    def parse(self) -> None:
        """Parse all fields from the contact element."""
        try:
            # Clean up XML space attributes
            if XML_SPACE_NS in self.element.attrib:
                del self.element.attrib[XML_SPACE_NS]

            # Process each element
            for el in self.element:
                if XML_SPACE_NS in el.attrib:
                    del el.attrib[XML_SPACE_NS]
                self._process_element(el)

        except Exception as e:
            self.errors.append(f"Error parsing contact: {str(e)}")

    def _process_element(self, element: etree.Element) -> None:
        """Process a single contact element."""
        try:
            if element.tag == 'OPFContactCopyDisplayName' and element.text:
                self.data['name']['display'] = element.text
            elif element.tag == 'OPFContactCopyFirstName' and element.text:
                self.data['name']['given'] = element.text
            elif element.tag == 'OPFContactCopyLastName' and element.text:
                self.data['name']['family'] = element.text
            elif element.tag == 'OPFContactCopyMiddleName' and element.text:
                self.data['name']['additional'] = element.text
            elif element.tag == 'OPFContactCopySetNameSuffix' and element.text:
                self.data['name']['suffix'] = element.text
            elif element.tag == 'OPFContactCopyTitle' and element.text:
                self.data['name']['christmas_card'] = element.text
            elif self._is_address_field(element):
                self._process_address(element)
            elif self._is_phone_field(element):
                self._process_phone(element)
            elif self._is_email_field(element):
                self._process_email(element)
            elif self._is_url_field(element):
                self._process_url(element)
            elif self._is_organization_field(element):
                self._process_organization(element)
            elif element.tag == 'OPFContactCopyNotesPlain' and element.text:
                self.data['note'] = element.text.strip()
            elif element.tag in ('OPFContactCopyPrimaryCategory', 'OPFContactCopyCategoryList'):
                self._process_categories(element)

        except Exception as e:
            self.errors.append(f"Error processing element {element.tag}: {str(e)}")

    def _is_address_field(self, element: etree.Element) -> bool:
        """Check if element is an address-related field."""
        return any(element.tag.startswith(prefix) for prefix in (
            'OPFContactCopyHome', 'OPFContactCopyBusiness', 'OPFContactCopyOther'
        )) and any(element.tag.endswith(suffix) for suffix in (
            'StreetAddress', 'City', 'State', 'Zip', 'Country'
        ))

    def _process_address(self, element: etree.Element) -> None:
        """Process an address field."""
        if 'Home' in element.tag:
            addr_type = 'home'
        elif 'Business' in element.tag:
            addr_type = 'work'
        else:
            addr_type = 'other'

        if addr_type not in self.data['addresses']:
            self.data['addresses'][addr_type] = {}

        addr = self.data['addresses'][addr_type]
        if 'StreetAddress' in element.tag:
            addr['street'] = element.text
        elif 'City' in element.tag:
            addr['city'] = element.text
        elif 'State' in element.tag:
            addr['region'] = element.text
        elif 'Zip' in element.tag:
            addr['code'] = element.text
        elif 'Country' in element.tag:
            addr['country'] = element.text

    def _is_phone_field(self, element: etree.Element) -> bool:
        """Check if element is a phone-related field."""
        return any(phone_type in element.tag for phone_type in (
            'Phone', 'Fax', 'CellPhone'
        ))

    def _process_phone(self, element: etree.Element) -> None:
        """Process a phone field."""
        if not element.text:
            return

        phone_info = {
            'value': element.text,
            'types': []
        }

        if 'Home' in element.tag:
            phone_info['types'].append('home')
        elif 'Business' in element.tag:
            phone_info['types'].append('work')
        elif 'Cell' in element.tag:
            phone_info['types'].append('cell')

        if 'Fax' in element.tag:
            phone_info['types'].append('fax')
        else:
            phone_info['types'].append('voice')

        self.data['phones'].append(phone_info)

    def _is_email_field(self, element: etree.Element) -> bool:
        """Check if element is an email-related field."""
        return element.tag in (
            'OPFContactCopyDefaultEmailAddress',
            'OPFContactCopyEmailAddressList',
            'OPFContactCopyEmailAddressList1',
            'OPFContactCopyEmailAddressList2'
        )

    def _process_email(self, element: etree.Element) -> None:
        """Process email fields."""
        for child in element:
            email = child.attrib.get('OPFContactEmailAddressAddress')
            if not email:
                continue

            email_type = child.attrib.get('OPFContactEmailAddressType', '0')
            is_primary = child.attrib.get('OPFContactEmailAddressIsDefault', '0') == '1'

            # Check if this email already exists
            existing = next((e for e in self.data['emails'] if e['value'] == email), None)
            if existing:
                # Verify consistency
                if (existing['type'] != EMAIL_TYPE_MAP[email_type] or
                    existing['primary'] != is_primary):
                    self.errors.append(
                        f"Inconsistent email attributes for {email}"
                    )
                continue

            self.data['emails'].append({
                'value': email,
                'type': EMAIL_TYPE_MAP[email_type],
                'primary': is_primary
            })

    def _is_url_field(self, element: etree.Element) -> bool:
        """Check if element is a URL-related field."""
        return element.tag in (
            'OPFContactCopyHomeWebPage',
            'OPFContactCopyBusinessHomePage'
        )

    def _process_url(self, element: etree.Element) -> None:
        """Process a URL field."""
        if not element.text:
            return

        url_type = 'home' if 'Home' in element.tag else 'work'
        self.data['urls'].append({
            'value': element.text,
            'type': url_type
        })

    def _is_organization_field(self, element: etree.Element) -> bool:
        """Check if element is an organization-related field."""
        return element.tag in (
            'OPFContactCopyBusinessDepartment',
            'OPFContactCopyBusinessCompany',
            'OPFContactCopyBusinessOffice',
            'OPFContactCopyBusinessTitle'
        )

    def _process_organization(self, element: etree.Element) -> None:
        """Process an organization field."""
        if not element.text:
            return

        if element.tag == 'OPFContactCopyBusinessTitle':
            self.data['title'] = element.text
        else:
            self.data['organization'].append(element.text.strip())

    def _process_categories(self, element: etree.Element) -> None:
        """Process category fields."""
        if element.tag == 'OPFContactCopyPrimaryCategory':
            for child in element:
                if child.tag == 'OPFCategoryCopyName' and child.text:
                    self.data['categories'].append({
                        'value': child.text,
                        'primary': True
                    })
        else:  # OPFContactCopyCategoryList
            for child in element:
                if (child.tag == 'category' and
                    'OPFCategoryCopyName' in child.attrib):
                    self.data['categories'].append({
                        'value': child.attrib['OPFCategoryCopyName'],
                        'primary': False
                    })

    def is_empty(self) -> bool:
        """Check if contact has any useful data."""
        return not any(
            value for value in self.data.values()
            if value and (not isinstance(value, dict) or any(value.values()))
        )

    def to_vcard(self, version: str = '3.0') -> vobject.vCard:
        """Convert contact data to vCard format."""
        vcard = vobject.vCard()
        try:
            # Add version
            vcard.add('version').value = version

            # Add name fields
            self._add_names(vcard)
            
            # Add addresses
            self._add_addresses(vcard)
            
            # Add phones
            self._add_phones(vcard)
            
            # Add emails
            self._add_emails(vcard)
            
            # Add URLs
            self._add_urls(vcard)
            
            # Add organization info
            self._add_organization(vcard)
            
            # Add categories
            self._add_categories(vcard)
            
            # Add note
            if 'note' in self.data:
                vcard.add('note').value = self.data['note']

            # Add Christmas card name if present
            if 'christmas_card' in self.data['name']:
                cc = vcard.add('X-ABRELATEDNAMES')
                cc.type_param = 'pref'
                cc.value = self.data['name']['christmas_card']
                cl = vcard.add('X-ABLabel')
                cl.value = 'Christmas Card Name'

        except Exception as e:
            self.errors.append(f"Error creating vCard: {str(e)}")

        return vcard

    def _add_names(self, vcard: vobject.vCard) -> None:
        """Add name-related fields to vCard."""
        # Add formatted name (required)
        fn = vcard.add('fn')
        if 'display' in self.data['name']:
            fn.value = self.data['name']['display']
        else:
            # Construct from parts
            parts = []
            if 'given' in self.data['name']:
                parts.append(self.data['name']['given'])
            if 'additional' in self.data['name']:
                parts.append(self.data['name']['additional'])
            if 'family' in self.data['name']:
                parts.append(self.data['name']['family'])
            fn.value = ' '.join(parts) if parts else 'Unknown'

        # Add structured name
        n = vcard.add('n')
        name = vobject.vcard.Name()
        name.family = self.data['name'].get('family', '')
        name.given = self.data['name'].get('given', '')
        name.additional = self.data['name'].get('additional', '')
        name.suffix = self.data['name'].get('suffix', '')
        n.value = name

    def _add_addresses(self, vcard: vobject.vCard) -> None:
        """Add addresses to vCard."""
        for addr_type, addr_data in self.data['addresses'].items():
            if not any(addr_data.values()):
                continue

            addr = vobject.vcard.Address()
            adr = vcard.add('adr')
            adr.value = addr

            # Set address components
            addr.street = addr_data.get('street', '')
            addr.city = addr_data.get('city', '')
            addr.region = addr_data.get('region', '')
            addr.code = addr_data.get('code', '')
            addr.country = addr_data.get('country', '')

            # Set type
            if addr_type == 'home':
                adr.type_param = ['home', 'pref']
            else:
                adr.type_param = addr_type

    def _add_phones(self, vcard: vobject.vCard) -> None:
        """Add phone numbers to vCard."""
        for phone in self.data['phones']:
            tel = vcard.add('tel')
            tel.value = phone['value']
            tel.type_param = phone['types']

    def _add_emails(self, vcard: vobject.vCard) -> None:
        """Add email addresses to vCard."""
        for email in self.data['emails']:
            email_field = vcard.add('email')
            email_field.value = email['value']
            types = [email['type']]
            if email['primary']:
                types.append('pref')
            email_field.type_param = types

    def _add_urls(self, vcard: vobject.vCard) -> None:
        """Add URLs to vCard."""
        for url_data in self.data['urls']:
            url = vcard.add('url')
            url.value = url_data['value']
            url.type_param = url_data['type']

    def _add_organization(self, vcard: vobject.vCard) -> None:
        """Add organization information to vCard."""
        if self.data['organization']:
            vcard.add('org').value = self.data['organization']
        if 'title' in self.data:
            vcard.add('title').value = self.data['title']

    def _add_categories(self, vcard: vobject.vCard) -> None:
        """Add categories to vCard."""
        primary_cats = [c['value'] for c in self.data['categories'] if c['primary']]
        other_cats = [c['value'] for c in self.data['categories'] if not c['primary']]

        if primary_cats:
            cats = vcard.add('categories')
            cats.value = primary_cats
            cats.type_param = 'pref'

        if other_cats:
            cats = vcard.add('categories')
            cats.value = other_cats

def parse_args() -> argparse.Namespace:
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description='Convert Microsoft Office XML contacts to vCard format'
    )
    parser.add_argument(
        'input_file',
        help='Input XML contact file'
    )
    parser.add_argument(
        '--output', '-o',
        help='Output vCard file (default: stdout)'
    )
    parser.add_argument(
        '--version',
        choices=['3.0', '4.0'],
        default='3.0',
        help='vCard version to generate (default: 3.0)'
    )
    parser.add_argument(
        '--ignore-errors',
        action='store_true',
        help='Continue processing on errors'
    )
    parser.add_argument(
        '--skip-empty',
        action='store_true',
        help='Skip contacts with no useful data'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Print debug information'
    )
    return parser.parse_args()

def setup_logging(debug: bool = False) -> None:
    """Configure logging system."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(levelname)s: %(message)s'
    )

def validate_xml_file(filepath: str) -> None:
    """Validate that the XML file exists and is readable."""
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"File not found: {filepath}")
    if not os.path.isfile(filepath):
        raise ValueError(f"Not a file: {filepath}")
    if not os.access(filepath, os.R_OK):
        raise PermissionError(f"File not readable: {filepath}")

def validate_contact_xml(root: etree.Element) -> None:
    """Validate that the XML has the expected structure."""
    if root.tag != 'contacts':
        raise ValueError(f"Expected root tag 'contacts', found '{root.tag}'")
    for contact in root:
        if contact.tag != 'contact':
            raise ValueError(f"Expected 'contact' tag, found '{contact.tag}'")

def process_contacts(root: etree.Element, args: argparse.Namespace):
    """Process all contacts with progress reporting."""
    total = len(root)
    processed = 0
    errors = 0
    skipped = 0
    
    for contact_elem in root:
        processed += 1
        if processed % 10 == 0:
            logging.info(f"Processing contact {processed}/{total}")
        
        contact = Contact(contact_elem)
        contact.parse()
        
        if contact.errors and not args.ignore_errors:
            errors += 1
            for error in contact.errors:
                logging.error(f"Contact {processed}: {error}")
            continue
            
        if args.skip_empty and contact.is_empty():
            skipped += 1
            logging.debug(f"Skipping empty contact {processed}")
            continue
            
        yield contact.to_vcard(args.version)
    
    logging.info(f"Processed {processed} contacts "
                f"({errors} errors, {skipped} skipped)")

def main() -> None:
    """Main entry point."""
    try:
        args = parse_args()
        setup_logging(args.debug)
        
        # Validate input file
        validate_xml_file(args.input_file)
        
        # Parse XML
        tree = etree.parse(args.input_file)
        root = tree.getroot()
        
        # Validate XML structure
        validate_contact_xml(root)
        
        # Verify contact count
        contacts_count = int(root.attrib.get('elementCount', 0))
        actual_count = len(root)
        if contacts_count != actual_count:
            logging.warning(
                f"XML elementCount ({contacts_count}) does not match "
                f"number of contacts found ({actual_count})"
            )
        
        # Process contacts
        if args.output:
            with open(args.output, 'w') as f:
                for vcard in process_contacts(root, args):
                    f.write(vcard.serialize())
        else:
            for vcard in process_contacts(root, args):
                print(vcard.serialize(), end='')
                
    except Exception as e:
        logging.error(str(e))
        sys.exit(1)

if __name__ == '__main__':
    main()
